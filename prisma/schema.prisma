// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  dob           DateTime?
  gender        String?
  email         String          @unique
  isboarded     Boolean         @default(false)
  image         String?
  bio           String?
  password      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  products      Product[]
  socialMedia   SocialMedia[]
  posts         Post[]
  saved         SavedPost[]
  likes         Like[]
  comments      Comment[]
  followedBy    Follows[]   @relation("following")
  following     Follows[]   @relation("follower")
} 


model SocialMedia {
  id       String   @id @default(cuid())
  platform String
  url      String
  userId   String   @map("user_id")
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}



model Follows {
    follower    User   @relation("follower", fields: [followerId], references: [id])
    followerId  String
    following   User   @relation("following", fields: [followingId], references: [id])
    followingId String

    @@id([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
}

model Post {
    id        String      @id @default(cuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    caption   String
    fileUrl   String?     @unique
    likes     Like[]
    savedBy   SavedPost[]
    comments  Comment[]
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String      @map("user_id")

    @@index([userId])
}

model Product {
    id            String       @id @default(cuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    fileUrl       String
    link          String
    title         String
    price         String
    currency      String
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String      @map("user_id")

    @@index([userId])
}

model SavedPost {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    userId    String   @map("user_id")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([postId, userId])
    @@index([userId])
}

model Like {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    userId    String   @map("user_id")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([postId, userId])
    @@index([userId])
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    body      String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    userId    String   @map("user_id")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([postId])
    @@index([userId])
}

